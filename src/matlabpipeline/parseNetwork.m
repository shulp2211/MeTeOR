function network = parseNetwork(filename, meta,startRow, endRow)
% Auto-generated by MATLAB on 2016/10/27 13:43:47

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    meta=0;
end
if nargin<=3
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: text (%s)
%	column2: text (%s)
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
if meta
    formatSpec = '%s%s%f%s%[^\n\r]';
else
    formatSpec = '%s%s%f%*s%[^\n\r]';
end
%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);

for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
if meta
    network = table(dataArray{1:end-1}, 'VariableNames', {'Entity1','Entity2','Confidence','MetaData'});
else
    network = table(dataArray{1:end-1}, 'VariableNames', {'Entity1','Entity2','Confidence'});
end

